Problem link: https://codeforces.com/contest/1980/problem/C

Intution:
Let's consider the example
n = 4
original array = 3 1 7 8
found array = 2 2 7 10
m = 5
d array   =      10 3 2 2 1
according to the given question we are performing m operations on the original array to get modified array.
Operation :- original_array[ci] = d[i]
So basically we are replacing the values of original array with the d array value at a particular index.

Now according to the above step the last value of array d must be present in the found array. Why you ask? well since we are replacing the values of original 
array then the last replace operation will contain the last index value of d array. Isn't it?

Now look at the last value of array d which is 1. 
We have to ask is 1 present in the found array? 
If not simply return "NO". 

Now for other values:
if original_array[i] = 7 && found_array = 7 both are same we need not to perform any modification operation for that index
if original_array[i] = 3 && found_array = 2 both are different, we need to check if modified value is present in the found_array i.e. d_array.

to handle the case of repetition we can just check if the count of '2' (value different in original & found array) is equal or more in d_array i.e. we can 
safely perform that many replace operations.


Time Complexity:
O(n) - for iterating over the original and found array, both are of length n
O(m) - iterating over d array (of length m) to store the count of values
Overall - O(max(n, m))

Space Complexity:
O(m) - using unordered_map/map to store the count of d array i.e. modification (replacement in this case) operations values.

_____________________________________________________________________________________________________________________________________________________
Code:
_____________________________________________________________________________________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;


int main(){
    int t;
    cin>>t;

    while(t--){
        int n;
        cin>>n;
        
        vector<int> original(n);
        for(auto &it: original){
            cin>>it;
        }
        
        vector<int> found(n);
        for(auto &it: found){
            cin>>it;
        }
        
        int m;
        cin>>m;
        vector<int> d(m);
        for(auto &it: d){
            cin>>it;
        }
        
        map<int, int> mismatch_elements, d_elements;
        for(int i = 0; i<found.size(); i++){
            if(original[i] != found[i]){
                mismatch_elements[found[i]]++;    // counting how many mismatch elements of original array and found array are different in <key, count> pair
            }
        }
        
        
        for(auto &it: d){
            d_elements[it]++;    // elements in d array and their frequency
        }
        
        
        bool flag = true;
      
        for(auto &item: mismatch_elements){
            if(item.second > d_elements[item.first]){
                flag = false;    // weather we can safely perform replacement operation or not, if we come inside if that means we can't
            }
        }

        // last element of d array present inside found array
        if(count(found.begin(), found.end(), d[m-1]) == 0)
            flag = false;    
        
        if(flag)    cout<<"YES"<<endl;
        else    cout<<"NO"<<endl;

    }
}
